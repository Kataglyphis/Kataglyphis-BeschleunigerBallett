name: Linux build + test + coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  BUILD_TYPE: Debug
  VULKAN_VERSION: 1.3.296

jobs:
  setup:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-24.04, ubuntu-24.04-arm]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install latest CMake
        run: |
          which cmake
          sudo rm -f /usr/local/bin/cmake
          sudo apt-get purge --auto-remove -y cmake
          sudo apt-get update
          sudo apt-get install -y wget gpg lsb-release ca-certificates
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc \
            | gpg --dearmor \
            | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] \
            https://apt.kitware.com/ubuntu/ noble main" \
            | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y cmake
          echo "/usr/bin" >> $GITHUB_PATH
          cmake --version

      - name: Install Vulkan on x64
        if: matrix.runner == 'ubuntu-24.04'
        run: |
          sudo apt-get update -y
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${{ env.VULKAN_VERSION }}-noble.list https://packages.lunarg.com/vulkan/${{ env.VULKAN_VERSION }}/lunarg-vulkan-${{ env.VULKAN_VERSION }}-noble.list
          sudo apt update
          sudo apt install vulkan-sdk

      - name: Install Vulkan SDK on ARM
        if: matrix.runner == 'ubuntu-24.04-arm'
        run: |
          # https://vulkan.lunarg.com/doc/sdk/1.4.313.0/linux/getting_started.html
          sudo apt install -y xz-utils
          sudo apt-get install -y libglm-dev cmake libxcb-dri3-0 libxcb-present0 libpciaccess0 \
            libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev g++ gcc \
            libwayland-dev libxrandr-dev libxcb-randr0-dev libxcb-ewmh-dev \
            git python-is-python3 bison libx11-xcb-dev liblz4-dev libzstd-dev \
            ocaml-core ninja-build pkg-config libxml2-dev wayland-protocols python3-jsonschema \
            clang-format qtbase5-dev qt6-base-dev
          wget https://sdk.lunarg.com/sdk/download/${{ env.VULKAN_VERSION }}.0/linux/vulkansdk-linux-x86_64-${{ env.VULKAN_VERSION }}.0.tar.xz
          tar -xf vulkansdk-linux-x86_64-${{ env.VULKAN_VERSION }}.0.tar.xz
          cd ${{ env.VULKAN_VERSION }}.0
          chmod +x vulkansdk 
          ./vulkansdk -j $(nproc) \
            glslang \
            vulkan-tools \
            vulkan-headers \
            vulkan-loader \
            vulkan-validationlayers \
            shaderc \
            spirv-headers \
            spirv-tools \
            vulkan-extensionlayer \
            volk \
            vma \
            vcv \
            vul \
            slang

      - name: Check Installation
        if: matrix.runner == 'ubuntu-24.04-arm'
        run: |
          which glslc

      - name: Install GLFW + build system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libglu1-mesa-dev \
          freeglut3-dev \
          mesa-common-dev \
          mesa-utils \
          wayland-protocols \
          libwayland-dev \
          libxkbcommon-dev \
          libglx-mesa0 \
          ninja-build \
          ccache \
          iwyu \
          graphviz \
          doxygen

      - name: Install for Offscreen Rendering on GLFW
        run: sudo apt-get install libosmesa6-dev

      - name: Install Code Coverage dependencies
        run: sudo apt-get install -y gcovr

      - name: Install clang
        run: sudo apt-get install clang llvm

      - name: Make directory
        run: |
          rm -rf build
          mkdir build

      - name: Build
        run: |
          cd build
          cmake --preset linux-debug-clang ..
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build/
        run: ctest -C ${{env.BUILD_TYPE}} --verbose --extra-verbose --debug -T test --output-on-failure -E Integration.VulkanEngine RendererTest.BasicSetup

      - name: Build Code Coverage
        run: |
          llvm-profdata merge -sparse ${{github.workspace}}/build/Test/compile/default.profraw -o ${{github.workspace}}/build/compileTestSuite.profdata
          llvm-cov report ${{github.workspace}}/build/compileTestSuite -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata
          llvm-cov export ${{github.workspace}}/build/compileTestSuite -format=text -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata > ${{github.workspace}}/build/coverage.json

      - name: ðŸ“‚ Sync files to dev domain
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PW }}
          local-dir: "./build/build/html/"

      - name: Codecov
        uses: codecov/codecov-action@v4.6.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{github.workspace}}/build/coverage.json
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: false
