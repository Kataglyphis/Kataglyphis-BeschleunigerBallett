name: Linux build reusable

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
    secrets:
      SERVER:
        required: true
      USERNAME:
        required: true
      PW:
        required: true
      CODECOV_TOKEN:
        required: true

env:
  BUILD_TYPE: Debug
  COMPILER: ${{ inputs.compiler }}
  GCC_PROFILE_PRESET: linux-profile-GNU
  CLANG_PROFILE_PRESET: linux-profile-clang
  VULKAN_VERSION: 1.4.321.1
  # folder/name configuration -- change here to affect the whole workflow
  BUILD_DIR: build
  BUILD_RELEASE_DIR: build-release
  DOCS_OUT: build/build/html
  COVERAGE_JSON: ${{ github.workspace }}/build/coverage.json

jobs:

  build_and_test:
    strategy:
      matrix:
        compiler: [clang, gcc]

    runs-on: ${{ inputs.runner }}

    steps:
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      #################################################################################################################
      ######################################## Prepare deps ###########################################################
      #################################################################################################################
      - name: Install deps
        run: |
          sudo apt-get purge --auto-remove -y cmake
          sudo chmod +x Scripts/Linux/setup-dependencies.sh
          sudo ./Scripts/Linux/setup-dependencies.sh ${{ env.VULKAN_VERSION }}
          echo "/usr/bin" >> $GITHUB_PATH

      #################################################################################################################
      ####################### Run unit/integration/fuzzy/coverage/tests/static analyzers ##############################
      #################################################################################################################
      - name: Set PRESET for compiler
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "PRESET=linux-debug-clang" >> $GITHUB_ENV
          else
            echo "PRESET=linux-debug-GNU" >> $GITHUB_ENV
          fi

      - name: Prepare for unit/integration tests
        run: |
          source "${{ github.workspace }}/${{ env.VULKAN_VERSION }}/setup-env.sh"
          # use the preset chosen above
          cmake -B ${{ env.BUILD_DIR }} --preset "$PRESET"
          cmake --build ${{ github.workspace }}/${{ env.BUILD_DIR }} --preset "$PRESET"

      - name: Run Unit/Integration tests
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest -C ${{env.BUILD_TYPE}} --verbose --extra-verbose --debug -T test --output-on-failure -E Integration.VulkanEngine RendererTest.BasicSetup

      - name: Run fuzzer tests
        run: |
          if [[ "${{ matrix.compiler }}" == "clang" ]]; then
            ./${{ env.BUILD_DIR }}/first_fuzz_test
          else
            echo "Compiled with GCC so no fuzz testing!"
          fi

      - name: Build Code Coverage
        run: |
          if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            gcovr -r .
          else
            llvm-profdata merge -sparse ${{github.workspace}}/${{ env.BUILD_DIR }}/Test/compile/default.profraw -o ${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite.profdata
            llvm-cov report ${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite -instr-profile=${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite.profdata
            llvm-cov export ${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite -format=text -instr-profile=${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite.profdata > ${{ env.COVERAGE_JSON }}
            llvm-cov show ${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite -instr-profile=${{github.workspace}}/${{ env.BUILD_DIR }}/compileTestSuite.profdata
          fi

      - name: Codecov
        if: ${{ matrix.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        uses: codecov/codecov-action@v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVERAGE_JSON }}
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: false

      - name: Run clang tidy
        continue-on-error: true
        run: clang-tidy -p=./${{ env.BUILD_DIR }}/compile_commands.json  $(find Src -name '*.cpp' -o -name '*.cc')

      - name: Run Clang static analysis (HTML)
        continue-on-error: true
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          # HTML output (correct flag form)
          clang++ --analyze -DUSE_RUST=1 -Xanalyzer -analyzer-output=html $(find Src -name '*.cpp' -o -name '*.cc')

      - name: Run Clang static analysis (scan-build)
        continue-on-error: true
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          mkdir -p scan-build-reports
          scan-build -o scan-build-reports cmake --build "${WORKSPACE}/${BUILD_DIR}" --preset "${CLANG_DEBUG_PRESET}"

      #################################################################################################################
      ############################# Now run on performance benchmarking/profiling #####################################
      #################################################################################################################
      - name: Configure/build CMake for Profiling (select preset by compiler)
        run: |
          rm -r "${{ github.workspace }}/${{ env.BUILD_DIR }}"
          if [[ "${COMPILER}" == "gcc" ]]; then
            PRESET="${GCC_PROFILE_PRESET}"
          else
            PRESET="${CLANG_PROFILE_PRESET}"
          fi
          echo "Using preset: ${PRESET}"
          cmake -B "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"
          cmake --build "${{ github.workspace }}/${{ env.BUILD_DIR }}" --preset "${PRESET}"

      - name: Run performance benchmarks
        run: ./${{ env.BUILD_DIR }}/perfTestSuite
        
      #################################################################################################################
      ######################################## Build docs #############################################################
      #################################################################################################################

      - name: Set up Python 3.13
        if: ${{ matrix.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13"

      # You can test your matrix by printing the current Python version
      - name: Setup python env
        if: ${{ matrix.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        run: |
          pip install -r requirements.txt

      - name: Build web page
        if: ${{ matrix.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        run: |
          cp ${{github.workspace}}/${{ env.DOCS_OUT }}/*.svg ./docs/source/_static
          cd docs/source
          python graphviz_generator.py 
          cd ..
          make html

      - name: ðŸ“‚ Sync files to domain
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        if: ${{ matrix.compiler == 'clang' && inputs.runner == 'ubuntu-24.04' }}
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PW }}
          local-dir: "./docs/build/html/"

  #################################################################################################################
  ################################ Build and package release version ##############################################
  #################################################################################################################
  release_package:
    needs: [build_and_test,]
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          submodules: recursive
      
      #################################################################################################################
      ######################################## Prepare deps ###########################################################
      #################################################################################################################
      - name: Install deps
        run: |
          sudo chmod +x Scripts/Linux/setup-dependencies.sh
          sudo ./Scripts/Linux/setup-dependencies.sh ${{ env.VULKAN_VERSION }}
          echo "/usr/bin" >> $GITHUB_PATH
          
      - name: Configure/build CMake for Release
        run: |
          source "${{ github.workspace }}/${{ env.VULKAN_VERSION }}/setup-env.sh"
          cmake -B ${{ env.BUILD_RELEASE_DIR }} --preset linux-release-clang
          cmake --build ${{ env.BUILD_RELEASE_DIR }} --config Release

      - name: Package
        run: |
          source "${{ github.workspace }}/${{ env.VULKAN_VERSION }}/setup-env.sh"
          cmake --build ${{ env.BUILD_RELEASE_DIR }} --target package

      - name: Upload Linux Packages (Clang only)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-packages
          path: |
            ${{ env.BUILD_RELEASE_DIR }}/*.tar.gz
            ${{ env.BUILD_RELEASE_DIR }}/*.tgz
            ${{ env.BUILD_RELEASE_DIR }}/*.deb
