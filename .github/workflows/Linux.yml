name: Linux build reusable

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
    secrets:
      SERVER:
        required: true
      USERNAME:
        required: true
      PW:
        required: true
      CODECOV_TOKEN:
        required: true

env:
  BUILD_TYPE: Debug
  VULKAN_VERSION: 1.3.296

jobs:
  build_and_test:
    runs-on: ${{ inputs.runner }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Remove too old CMake
        run: |
          which cmake || true
          sudo rm -f /usr/local/bin/cmake || true
          sudo apt-get purge --auto-remove -y cmake || true
          
      - name: Install deps
        run: |
          sudo chmod +x Scripts/Linux/setup-dependencies.sh
          sudo ./Scripts/Linux/setup-dependencies.sh ${{ env.VULKAN_VERSION }}

      - name: Check Installation and update path
        if: inputs.runner == 'ubuntu-24.04-arm'
        run: |
          echo "${{ github.workspace }}/${{ env.VULKAN_VERSION }}.0/aarch64/bin" >> $GITHUB_PATH
          which glslc

      - name: Update path
        run: |
          which glslc
          echo "/usr/bin" >> $GITHUB_PATH
          cmake --version

      - name: Make directory
        run: |
          rm -rf build
          mkdir build

      - name: Build
        run: |
          # Only source if we're on Ubuntu ARM64
          if [[ "$(uname -s)" == "Linux" ]] && [[ "$(uname -m)" == "aarch64" ]]; then
            source "${{ github.workspace }}/${{ env.VULKAN_VERSION }}.0/setup-env.sh"
          fi
          cmake -B build --preset linux-debug-clang
          cmake --build ${{github.workspace}}/build --preset linux-debug-clang

      - name: Test
        working-directory: ${{github.workspace}}/build/
        run: ctest -C ${{env.BUILD_TYPE}} --verbose --extra-verbose --debug -T test --output-on-failure -E Integration.VulkanEngine RendererTest.BasicSetup

      - name: Build Code Coverage
        run: |
          llvm-profdata merge -sparse ${{github.workspace}}/build/Test/compile/default.profraw -o ${{github.workspace}}/build/compileTestSuite.profdata
          llvm-cov report ${{github.workspace}}/build/compileTestSuite -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata
          llvm-cov export ${{github.workspace}}/build/compileTestSuite -format=text -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata > ${{github.workspace}}/build/coverage.json
          llvm-cov show ${{github.workspace}}/build/compileTestSuite -instr-profile=${{github.workspace}}/build/compileTestSuite.profdata

      - name: Set up Python 3.11
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.11"
      # You can test your matrix by printing the current Python version
      - name: Setup python env
        run: |
          pip install -r requirements.txt

      - name: Build web page
        run: |
          cp ${{github.workspace}}/build/build/html/*.svg ./docs/source/_static
          cd docs/source
          python graphviz_generator.py 
          cd ..
          make html

      - name: ðŸ“‚ Sync files to domain
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        if: inputs.runner == 'ubuntu-24.04'
        with:
          server: ${{ secrets.SERVER }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PW }}
          local-dir: "./docs/build/html/"

      - name: Codecov
        if: inputs.runner == 'ubuntu-24.04'
        uses: codecov/codecov-action@v4.6.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{github.workspace}}/build/coverage.json
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: false

      - name: Configure CMake for Release
        run: |
          cmake -B build-release --preset linux-release-clang

      - name: Build Release
        run: |
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake --build build-release --config Release

      - name: Package
        run: |
          cmake --build build-release --target package
