name: Windows Server 2025 build x86 MSVC and Clang

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  BUILD_DIR: build
  VULKAN_VERSION: 1.3.296.0
  CLANG_VERSION: 20.1.0
  VULKAN_SDK_PATH: C:\VulkanSDK
  # VK_SDK_PATH: C:\VulkanSDK

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2025
    # env:
    #  VULKAN_SDK: C:\VulkanSDK\
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up PATH
        run: |
          echo "${{ env.VULKAN_SDK_PATH }}\${{ env.VULKAN_VERSION }}\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ env.VULKAN_SDK_PATH }}\${{ env.VULKAN_VERSION }}\Lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ env.VULKAN_SDK_PATH }}\${{ env.VULKAN_VERSION }}\Include" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Vulkan + CMake + LLVM + Cppcheck
        run: |
          choco install llvm --version="${{ env.CLANG_VERSION }}" --params="'/AddToPath'" -y
          choco install sccache
          winget install --accept-source-agreements --accept-package-agreements cmake cppcheck
          winget install --accept-source-agreements --accept-package-agreements --id=KhronosGroup.VulkanSDK -v "${{ env.VULKAN_VERSION }}" -e
          # ls "C:\VulkanSDK"

      # for now cppcehck is buggy on windows 2025 github runner. so disable
      # a github runner has issues with running vulkan driver code; therefore just verify successful build :)
      - name: CMake Build for Clang
        shell: powershell
        run: |
          cmake -B ${{github.workspace}}/build --preset "x64-Clang-Windows-CI" -Dmyproject_ENABLE_CPPCHECK="OFF"
          cmake --build ${{github.workspace}}/build
          ctest

      - name: Prepare for MSVC
        run: |
          Remove-Item -Path ${{github.workspace}}/build -Recurse -Force
          clang --version

      - name: CMake Build for MSVC
        shell: powershell
        run: |
          cmake -B ${{github.workspace}}/build --preset "x64-MSVC-Windows-CI" -Dmyproject_ENABLE_CPPCHECK="OFF"
          cmake --build ${{github.workspace}}/build
          ctest

      - name: Configure CMake for Release (Clang only)
        run: |
          cmake -B build_release --preset "x64-Clang-Windows-Release" -Dmyproject_ENABLE_CPPCHECK="OFF"

      - name: Build Release (Clang only)
        shell: pwsh
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = $env:NUMBER_OF_PROCESSORS
          cmake --build build_release --preset "x64-Clang-Windows-Release"

      - name: Package (Clang only)
        run: |
          cmake --build build_release --target package
